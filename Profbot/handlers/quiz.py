import matplotlib.pyplot as plt
import random
from aiogram import types, Router, F
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from questions.questions import QUESTIONS, MAIN_QUESTION
from questions.answers import answers_map
from recommendations.common_recommend import send_end_message
from keyboards.keyboards import ans_kb, make_vuz_keyboard, rec_button, main_kb, indf_kb
from recommendations.info import COMMON_DICT_INFO
from db.db import save_result

quiz_router = Router()

class Quiz(StatesGroup):
    who_is = State()
    in_process = State()
    recommend_vuz = State()


class AnswerFilter(BaseFilter):
    def __init__(self, valid: list[str], case_insensitive: bool = True):
        if case_insensitive:
            self.valid = {v.lower() for v in valid}
        else:
            self.valid = set(valid)
        self.case_insensitive = case_insensitive

    async def __call__(self, message: Message):
        text = (message.text or "").strip()
        if self.case_insensitive:
            text = text.lower()
        return text in self.valid


def create_pic(labels, values):
    fig, ax = plt.subplots() #—Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ö–æ–ª—Å—Ç–∞

    ax.pie(values, labels=labels, autopct="%1.1f%%", startangle=90) #—Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    ax.axis("equal") #–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ –∫—Ä—É–≥
    plt.savefig("ans.png") #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É

    plt.close() #–∑–∞–∫—Ä—ã–ª–∏ –æ–∫–Ω–æ


check = ["a", "b", "c", "d"]
check_status = ["—à–∫–æ–ª—å–Ω–∏–∫", "—Å—Ç—É–¥–µ–Ω—Ç", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"]


@quiz_router.message(Command('quiz'))
async def start_test(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(Quiz.who_is)
    await message.answer(text = MAIN_QUESTION,
                         parse_mode="HTML",
                         reply_markup=indf_kb)

@quiz_router.message(Quiz.who_is, AnswerFilter(check_status))
async def indentif_message(message: Message, state: FSMContext):
    status = message.text.lower()
    await state.update_data(status=status)

    shuffled = random.sample(QUESTIONS, len(QUESTIONS))
    start_index = 1
    await state.update_data(q_index=start_index, questions=shuffled)
    await state.set_state(Quiz.in_process)
    await message.answer(text = str(start_index)+". "+shuffled[0],
                         reply_markup=ans_kb)

@quiz_router.message(Quiz.who_is)
async def input_error_indf(message: Message):
    await message.answer(text="‚ùå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: —à–∫–æ–ª—å–Ω–∏–∫, —Å—Ç—É–¥–µ–Ω—Ç, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫")


@quiz_router.message(Quiz.in_process, AnswerFilter(check))
async def handle_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("finished"):
        return
    scores = data.get("scores", {"–∏–Ω–∂–µ–Ω–µ—Ä": 0, "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": 0, "–ø—Å–∏—Ö–æ–ª–æ–≥": 0, "–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å": 0})
    q_index = data["q_index"]
    shuffled = data["questions"]
    input_text = message.text
    if input_text == "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç":
        return
    profession = answers_map[q_index][input_text]
    scores[profession] += 1
    await state.update_data(scores=scores)
    q_index += 1

    if q_index-1 < len(shuffled):
        await state.update_data(q_index=q_index)
        await message.answer(text = str(q_index)+'. '+shuffled[q_index-1],
                             reply_markup=ans_kb)
    else:
        await state.update_data(finished=True)
        total = sum(scores.values())
        names = []

        for key in scores.keys():
            names.append(key)

        percentages = [(count / total) * 100 for role, count in scores.items()]
        rounded = [round(el) for el in percentages[:-1]]
        rounded.append(100 - sum(rounded))

        stickers = ['‚öôÔ∏è','üë®‚Äçüíª','üß†','üí∞']
        result = '\n'.join([f"{stickers[i]}<b>{role}</b>: {rounded[i]}%" for i, (role, _) in enumerate(scores.items())])

        scores = data.get("scores", {})
        main_prof = max(scores, key=scores.get)
        await state.update_data(main_profession=main_prof)

        create_pic(names, rounded)
        photo = FSInputFile("ans.png")

        await message.answer_photo(photo, caption="–í–æ—Ç –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"+result,
                                   parse_mode="HTML",
                                   reply_markup=rec_button)

        await state.set_state(Quiz.recommend_vuz)


@quiz_router.message(Quiz.in_process, F.text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç")
async def finish_quiz(message: Message, state: FSMContext):
    result = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    await save_result(
        name=message.from_user.first_name,
        user_id=message.from_user.id,
        result=result
    )
    await state.clear()
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!ü•∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—ë –¥–æ –∫–æ–Ω—Ü–∞, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π ‚Äî /quiz",
        reply_markup=main_kb
    )


@quiz_router.message(Quiz.in_process)
async def invalid_answer(message: Message):
    await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –±—É–∫–≤: a, b, c, d.")


@quiz_router.message(Quiz.recommend_vuz, F.text.lower() == "–ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def send_recommend(message: Message, state: FSMContext):
    data = await state.get_data()
    main_prof = data["main_profession"]
    status = data["status"]
    rec_kb = make_vuz_keyboard(main_prof, status)
    await message.answer(text=send_end_message(main_prof)+"\n"+COMMON_DICT_INFO[status][main_prof],
                         parse_mode="HTML",
                         reply_markup=rec_kb)

    result = main_prof

    await save_result(
        name=message.from_user.first_name,
        user_id=message.from_user.id,
        result=result
    )

    await message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!ü•∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—ë –≤–Ω–æ–≤—å, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π - <b>/quiz</b>",
                         parse_mode="HTML",
                         reply_markup=main_kb)

    await state.clear()


@quiz_router.message(F.text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç")
async def the_end(message: Message, state: FSMContext):
    data = await state.get_data()
    result = data["main_profession"]
    await save_result(
        name=message.from_user.first_name,
        user_id=message.from_user.id,
        result=result
    )
    await state.clear()
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!ü•∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—ë –≤–Ω–æ–≤—å, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π ‚Äî /quiz, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã",
        reply_markup=main_kb
    )









